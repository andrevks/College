#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
WS : [\ \t\n\r]






#Tokens
:{WS}*
id: {L} ( {L} | {D})*
num: {D}+

display = id:"display" 
input = id:"input"
digit = id: "digit"
beginFun = id: "BeginFun"
endFun = id: "EndFun"

if = id: "if"
then = id: "then"
else = id: "else"
end = id: "end"
elif = id:d "elif"
loopwhile = id: "loopwhile"
do = id: "do"
endloop = id: "endloop"
expression = id: "expression"
compare = id: "compare"

"."
"<-"
","
"("
")"

//expressions
"or"
"and"

//Arithmetic Expressions
"+"
"-"
"/"
"*"

//Relational Operators
"="
"<>"
"<"
">"
"*"
"return"//It should have a function to make the fibonacci in recursion

#NonTerminals
<PROGRAMA>
<LISTA_COMANDOS>
<COMANDO>
<ANT_VAR>


<INPUT> 
<DISPLAY>


<ELSE>
<ELIF>

<COMPR> 
<OPER>
<OPER_REL>
<OPERAN>
<MULT_OP>
<ADD_OP>
<TR_ADD>
<TR_MULT>

<TERM>
<EXPR>
<MULT_EXPR>
<SIM_EXPR>
#Grammar
<PROGRAMA> ::= beginFun <LISTA_COMANDOS> endFun;
<LISTA_COMANDOS> ::= <COMANDO>"." <LISTA_COMANDOS> | î ; 
<COMANDO> ::= id "<-" <EXPR>;
<COMANDO> ::= <ANT_VAR> id ;
<ANT_VAR> ::= input | digit;
<COMANDO> ::= display <EXPR>;

//If-Statment
<COMANDO> ::= if <EXPR> then <LISTA_COMANDOS> <ELIF> <ELSE> end;
<ELSE> ::= else <LISTA_COMANDOS> | î ;
<ELIF> ::= elif <EXPR> <LISTA_COMANDOS> | î;

//While-statment
<COMANDO> ::= loopwhile <COMPR> do <LISTA_COMANDOS> endloop;

//Expressions
<EXPR> ::= <MULT_EXPR> <TR_ADD>;

<TR_ADD> ::= <ADD_OP> <OPERAN> <TR_MULT> | î;

<TR_MULT> ::= <MULT_OP> <OPERAN> | î;

<MULT_EXPR> ::= <OPERAN> <TR_MULT>; 


<COMPR> ::= compare;
<OPER_REL> ::= "=" | "<>" | "<" | ">" | "or" | "and";
<OPERAN> ::= id | num ;

<ADD_OP> ::= "+" | "-" ;
<MULT_OP> ::= "*" | "/" ;
//<SINAL> ::= "+" | "-"| î ;




